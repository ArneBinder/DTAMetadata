{# 
    Template for rendering forms of any type.

The dynamic extend is for extending the template of the currently active domain, 
    (the overridden domainKey value is passed by the renderWithDomainMenu method
    within the DTABaseController.
    The according template files are located in 
        src/DTA/MetadataBundle/Resources/views/domainKey/base.html.twig
    Template inheritance is basically for inheriting the correct domain menu.
#}
{% extends 'DTAMetadataBundle:'~ domainKey ~':' ~ domainKey ~ '.html.twig' %}



{% form_theme form 'DTAMetadataBundle:Form:sortableCollection.html.twig' %}

{% block core %}

    <h3>{{className}}</h3>

    {{domainKey}}
    
    <hr/>
    
    <form action="{{ path('genericNew', {'className':className, 'domainKey': domainKey}) }}" method="post" {{ form_enctype(form) }}>
        {{ form_rest(form) }}
         <input type="submit"/>
    </form>
    
    <hr/>
    
    <pre>{%if persistedObject is defined %}{{dump(persistedObject)}}{%endif%}</pre>
   
    
{% endblock %}

{# Some fragments

 <form action="{{ path('genericNew', {'className':className}) }}" method="post" {{ form_enctype(form) }}>
     <ol class="zebra collection-editor collection-sortable" data-prototype="{{ form_widget(form.titleFragments.vars.prototype)|e }}">
        {% for titlefragment in form.titleFragments %}
            <li>
            {{ form_errors(titlefragment.titlefragmenttype) }}
            {{ form_widget(titlefragment.titlefragmenttype) }}
            {{ form_row(titlefragment.name) }}       
            {{ form_row(titlefragment.sortableRank) }}          
            </li>
        {% endfor %}
      </ol>
        {{ form_rest(form) }}
        <input type="submit"/>
    </form>

<form action="{{ path('genericNew', {'className':className, 'recordId': recordId}) }}" method="post" {{ form_enctype(form) }}>
        {{ form_rest(form) }}
         <input type="submit"/>
    </form>


    <form action="{{ path('genericNew', {'className':className, 'recordId':0}) }}" method="post" {{ form_enctype(form) }}>
     <ol class="collection-editor collection-sortable" data-prototype="{{ form_widget(form.titleFragments.vars.prototype)|e }}">
        {% for titlefragment in form.titleFragments %}
            <li>
            {{ form_errors(titlefragment.titlefragmenttype) }}
            {{ form_widget(titlefragment.titlefragmenttype) }}
            {{ form_row(titlefragment.name) }}       
            {{ form_row(titlefragment.sortableRank) }}          
            </li>
        {% endfor %}
      </ol>
        {{ form_rest(form) }}
        <input type="submit"/>
    </form>

#}