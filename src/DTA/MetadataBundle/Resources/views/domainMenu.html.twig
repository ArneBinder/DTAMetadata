{# Takes a domain menu data set and links it to the generic CRUD actions.
    
    If the modelClass option is set on a menu entry, the view and create options are added automatically.
    For custom behavior, specify a route and optionally parameters, like in the data domain controller.
    Using the children property on an item, a submenu can be rendered (data domain menu entry > related options)

    The translation engine is used to generate the german descriptions from the model class names,
    if no caption is given (e.g. einteilige Monographie for Monograph)

<code>
    public static $domainMenu = array(
        array("caption" => "Publikationen", "route" => 'listAllPublications', "options" => array("option1", "option2"), "children" => array(
                array('caption' => "Alle Publikationsarten", 'route' => 'home'),
                array('caption' => "Bücher", 'modelClass' => 'Monograph'),
                array('caption' => "Zeitschriften", 'modelClass' => 'Magazine'),
                array('caption' => "Reihen", 'modelClass' => 'Series'),
                array('caption' => "Essays", 'modelClass' => 'Essay'))),
        array("caption" => "Personen", "route" => 'home', "children" => array(
                array('caption' => "Alle Personen", 'route' => 'home'),
                array('caption' => "Autoren", 'modelClass' => 'Author'),
                array('caption' => "Verleger", 'modelClass' => 'Publisher'),
                array('caption' => "Übersetzer", 'modelClass' => 'Translator'),
                array('caption' => "Drucker", 'modelClass' => 'Printer'))),
        array("caption" => "Verlage", 'modelClass' => 'PublishingCompany'),
    );
</code>
#}


{% for item in domainMenu %}
{% if item.children is defined %}
    <li class="dropdown">
        <a href="#" class="dropdown-toggle" data-toggle="dropdown"> 
            {{ item.caption }} 
            <b class="caret"></b> 
        </a>
        <ul class="dropdown-menu">
        {% for child in item.children%}

        {# If the menu element is a model class, add view and create options #}
        {% if child.modelClass is defined %}
            <li class="dropdown-submenu">
            <a href="#" class="dropdown-toggle" data-toggle="dropdown"> 
                {{ child.caption|default(child.modelClass|trans) }} 
            </a>
                <ul class="dropdown-menu">
                    <li>
                        <a href="{{ path('genericView', {'domainKey': domainKey, 'className':child.modelClass}) }}"> 
                            <i class="icon-list"></i> Anzeigen und bearbeiten
                        </a>
                    </li>
                    {# Using the domainKey to dynamically generate the path also works:
                        path(domainKey~'NewRecord', {'className':child.modelClass})
                     #}
                    <li>
                        <a href="{{ path('genericNew', {'domainKey':domainKey, 'className':child.modelClass}) }}"> {#, 'recordId':0, 'domainKey': domainKey#}
                            <i class="icon-plus"></i> Neu anlegen
                        </a>
                    </li>
                </ul>
            </li>
        {% else %}
            <li><a href="{{ path(child.route, child.options|default({})) }}">{{ child.caption }}</a></li>
        {% endif %}
        {% endfor %}
        </ul>
    </li>
{% else %} {# item has no children #}
    {# If the menu element is a model class, add view and create options #}
    {% if item.modelClass is defined %}
        <li>
               <a href="{{ path('genericView', {'domainKey':domainKey, 'className':item.modelClass}) }}"> 
                      {{ item.caption }} 
                </a>
        </li>
    {# The menu element is a simple link #}
    {% else %}
        <li><a href="{{ path(item.route, item.options|default({})) }}">{{ item.caption }}</a></li>
    {% endif %}
{% endif %}
{% endfor %}

{# 
    old generic domain menu of the base template
{% for item in domainMenu %}
{% if item.children is defined %}
    <li  class="dropdown" >
        <a href="#" class="dropdown-toggle" data-toggle="dropdown"> 
            {{ item.caption }} <b class="caret"></b> </a>
        <ul class="dropdown-menu">
        {% for child in item.children %}
            <li><a href="{{ path(child.path) }}">{{ child.caption }}</a></li>
        {% endfor %}
        </ul>
    </li>
{% else %}
    <li> 
        <a href="{{ path(item.path) }}"> {{ item.caption }} </a>
    </li>
{% endif %}
{% endfor %} #}
