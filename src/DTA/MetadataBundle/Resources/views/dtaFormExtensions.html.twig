{# This defines how to render the sortable collection form type widget.
    Its structure is derived from the collection form type, basically
    removing the labels and adding indicator classes to it to trigger javascript gui generation.

    The basics were taken from form_div_layout.hmtl.twig as provided by the symfony vendor files.

    the convention for naming blocks is
        <name> = result of form type's getName() function
        <name>_widget
 #}

{#% block title_label %} 
{% endblock title_label %}

{% block title_widget %} 
{{form_widget(form)}}
{% endblock title_widget %}

{% block titleFragment_widget %}
<div class="form-inline">
{{ form_widget(form.titlefragmenttype,  {'attr':{'class':'franzoesisch'} }) }}
</div>
{{ form_rest(form, {'attr':{'class':'english'} }) }}
{% endblock titleFragment_widget %#}

{#% block model_row%}
{{ form_widget(form, , {'attr':{'style':'float:left; margin-right: 10px'} }) }}
{% endblock model_row %#}

{% block titlefragment_row %}
    <div>
        {% for child in [form.titlefragmenttype, form.name] %}
            <div style="float:left; margin-right: 10px">
                {{ form_row(child )}} 
            </div>
        {% endfor %}
        {{form_row(form.NameIsReconstructed, {'label_attr':{'class':'label-inline-centered'}, 
                'attr':{'class':'checkbox-inline-centered'} })}}
            <div>
    {{form_rest(form)}}
                </div>
    </div>
{% endblock %}

{% block personalname_row %}
    {{ form_widget(form) }}
{% endblock %}

{% block namefragment_row %}
    <div>
        {% for child in [form.namefragmenttype, form.name] %}
            <div style="float:left; margin-right: 10px">
                {{ form_row(child )}} 
            </div>
        {% endfor %}
        {{form_rest(form)}}
    </div>
{% endblock %}

{# without the surrounding div of each row #}

{#% block model_row %}
{% spaceless %}
        {{ form_label(form) }}
        {{ form_errors(form) }}
        {{ form_widget(form, {'attr':{ 'style':'float:left; margin-right:10px;' } }) }}
{% endspaceless %}
{% endblock %#}


{#  -----------------------------------------------------------------------------
    The selectOrAdd widget extends a select box with 
    an option to add a new database entity 
    ----------------------------------------------------------------------------- #}

{% block selectOrAdd_widget %} 
    {# The default select box#}
    {{form_widget(form)}} 
    {# The href attribute of the button, which defines the target modal, is added via javascript. #}
    <button class="selectOrAdd add btn" type="button" data-toggle="modal">{{ form.vars.label }} {{ 'selectOrAdd.addBtn.suffix'|trans }}</button>
    <input type="hidden" class="selectOrAdd" name="modelClass" value="{{ form.vars.modelClass }}"/>
    <input type="hidden" class="selectOrAdd" name="formRetrieveUrl" value="{{ path('plainForm', {'className': form.vars.modelClass, 'captionProperty': form.vars.captionProperty, 'domainKey': "ajax"}) }}"/>
    
    {#{dump(form.vars)}#}
{% endblock selectOrAdd_widget %}

{#  -----------------------------------------------------------------------------
    sortable collection widget
    ----------------------------------------------------------------------------- #}

{% block sortableCollection_widget %}
{% spaceless %}
    {% if prototype is defined %}
        {# Add prototype for dynamically adding forms with JS #}
        {% set attr = attr|merge({'data-prototype': form_row(prototype) }) %}
        {# Set marker classes for the JS (collectionControl.js) to add the corresponding buttons #}
        {% set attr = attr|merge({'class': "collection-editor collection-sortable" }) %}
    {% endif %}
    {#% set attr = attr|merge({'class': 'sortableCollection'}) %#}
    <ol class='collection-sortable'{{ block('widget_container_attributes', {'attr':attr|merge({'class':'sortableCollection'})}) }} >
        {% if form.parent is empty %}
            {{ form_errors(form) }}
        {% endif %}
        {{ block('sortableCollection_rows') }}
        {{ form_rest(form) }}
    </ol>
        {#onclick="function(){console.log('success')}"#}

    <a href="#" class="sortableCollectionWidget add-entity">
        {{ form.vars.modelClass|trans }} hinzuf√ºgen {prototype: swapping doesn't yet copy all values.}
    </a>
    
    {# For the javascript to have access to the translated modelClass name.
       The up and down sortable controls need this to be more expressive.   #}
    <input type="hidden" name="translatedModelClassName" value="{{ form.vars.modelClass|trans }}"/>
    <input type="hidden" name="modelClassName" value="{{ form.vars.modelClass }}"/>
    
{% endspaceless %}
{% endblock %}

{% block sortableCollection_rows %}
{% spaceless %}
    {% for child in form %}
    <li>
        {{ form.vars.modelClass|trans }}
        
        {#{ form_errors(child) }}
        {{ form_widget(child) }#}
        {# omit the default label (just a zero-based index) for each fragment 
        {{ form_errors(child) }}    #}
        {{ form_row(child) }}
    </li>
    {% endfor %}
{% endspaceless %}
{% endblock %}