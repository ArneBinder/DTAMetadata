{# Takes a nested set of model entities and creates a submenu with links to the CRUD actions on them.
    
    For custom behavior, specify a route and optionally parameters, like in the data domain controller.
    Using the children property on an item, a submenu can be rendered (data domain menu entry > related entries)

    The translation engine is used to generate the german descriptions from the model class names,
    if no caption is given (e.g. einteilige Monographie for Monograph)

<code>
    public static $domainMenu = array(
        array("caption" => "Publikationen", "route" => 'listAllPublications', "parameters" => array("option1", "option2"), "children" => array(
                array('caption' => "Alle Publikationsarten", 'route' => 'home'),
                array('caption' => "Bücher", 'modelClass' => 'Monograph'),
                array('caption' => "Zeitschriften", 'modelClass' => 'Magazine'),
                array('caption' => "Reihen", 'modelClass' => 'Series'),
                array('caption' => "Essays", 'modelClass' => 'Essay'))),
        array("caption" => "Personen", "route" => 'home', "children" => array(
                array('caption' => "Alle Personen", 'route' => 'home'),
                array('caption' => "Autoren", 'modelClass' => 'Author'),
                array('caption' => "Verleger", 'modelClass' => 'Publisher'),
                array('caption' => "Übersetzer", 'modelClass' => 'Translator'),
                array('caption' => "Drucker", 'modelClass' => 'Printer'))),
        array("caption" => "Verlage", 'modelClass' => 'PublishingCompany'),
    );
</code>
#}

{# to highlight the active entity: get class name from url.  #}
{% set highlightItem = app.request.attributes.get('_route_params').className|default(app.request.attributes.get('_route')) %}

<div class="nav ">
    <ul class="nav navbar-nav">
            
    {# render top level links #}
    {% for item in domainMenu %}
        
        {# top level link with children #}
        {% if item.children is defined %}

            {# find out whether to highlight the current item #}
            {% set isInSubMenu = false %}
            {% for child in item.children %}
                {% if child.modelClass is defined %}
                    {% set isInSubMenu = isInSubMenu or highlightItem == child.modelClass %}
                {% endif %}
            {% endfor %}

            <li class="dropdown {{ isInSubMenu ? "active" : ""}}"> 
                
                <a data-toggle="dropdown" class="dropdown-toggle" href="#"> 
                    {{ item.caption|trans}}
                    <b class="caret"></b>
                </a>
                
                {# the dropdown menu #}
                <ul class="dropdown-menu" role="menu" style="min-width:180px">
                {% for child in item.children%}
                        
                    {% set createEntityButton = child.createEntityAction is defined ? 
                        '<a class="dropdownMenuCreateEntityButton">'~child.createEntityAction.modelClass~'</a>' : 
                        ''%}
                    
                    {% if child.kind|default('') == 'divider' %}
                    <li class="divider"></li>
                    {% elseif child.modelClass is defined %}
                    {# If the menu element is a model class, add view and create options #}
                    <li>
                        <a href="{{ path(package~'_genericViewAll', {'package':package, 'className':child.modelClass}) }}">
                            {{ child.caption|default(child.modelClass|trans)|trans}} 
                            {{createEntityButton|raw}}
                        </a>
                    </li>
                    {% else %}
                    <li>
                        <a href="{{ path(child.route, child.parameters|default({})) }}">
                            {{ child.caption|trans }}
                            {{createEntityButton|raw}}
                        </a>
                    </li>
                    {% endif %}
                {% endfor %}
                </ul>
            </li>
        {# top level link without children #}
        {% else %} 
            {# If the menu element is a model class, add view and create options #}
            {% if item.modelClass is defined %}
                {% set active = highlightItem == item.modelClass ? "active" : ""%}
                <li class="{{active}}">
                    <a href="{{ path(package~'_genericViewAll', {'package':package, 'className':item.modelClass}) }}"> 
                           {{ item.caption|trans }} 
                     </a>
                </li>
            {# The menu element is a simple link #}
            {% else %}
                {% set active = highlightItem == item.route ? "active" : ""%}
                <li class="{{active}}">
                    <a href="{{ path(item.route, item.parameters|default({})) }}">{{ item.caption }}</a>
                </li>
            {% endif %}
        {% endif %}
    {% endfor %}
                
    </ul>  
        
    {#  ---------------------------------------------
        Print session flash (status results of actions)
        --------------------------------------------- #}
    <ul class="nav navbar-nav navbar-right">
        {% for flashType in ['success', 'warning', 'error'] %} 
            {% for flash in app.session.flashbag.get(flashType) %} 
            <li><a href="#" style="font-style:italic">{{ flash }}</a></li>
            {#<div class="alert alert-{{flashType}}">
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                {{ flash }}
            </div>#}
        {% endfor %} 
    </ul>
            
            
            {% endfor %}
</div><!--/.nav-collapse -->