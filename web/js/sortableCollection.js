/* 
 * Contains the UI logic for the sortableCollection form type (src/DTA/MetadataBundle/Form/DerivedType/SortableCollectionType.php).
 * This is basically an input to specify a dynamic number of relations between a database entity and another.
 * Whereever multiple relations between model entities are possible, 
 * DOM manipulation is necessary to dynamically generate the necessary form inputs.
 * 
 * Additionally, some relations are sortable. Buttons to control the order of
 * form elements are generated by this javascript as well.
 */

jQuery(document).ready(function(){
    // collections are by (my) convention maintained within unordered lists that have the css-class collection-editor
    var collectionTags = jQuery('.collection-editor');
    jQuery.each(collectionTags, function(idx,element){
        createAddLink(element);
    })
    
    // add control elements for sortable collections (collection-sortable)
    var sortableElements = jQuery('.collection-sortable li');
    jQuery.each(sortableElements, function(idx,element){
        createSortableControls(element);
    });
   
});

function createAddLink(element){
    var linkText = 'Bestandteil Hinzuf√ºgen {swapping doesn\'t yet copy all values.}';
    var link = $('<a href="#" class="add-entity">'+linkText+'</a>');
    link.on('click', addFormElement);    
    $(element).append(link);
}

function addFormElement(){
    
    var collectionHolder = $(this).parent();
    console.log(collectionHolder,this);
    var sortable = collectionHolder.hasClass('collection-sortable');
    
    var prototype = collectionHolder.attr("data-prototype");
    if(prototype === undefined){
        console.log('No protoype element for the collection editor available!');
        return false;
    }            
        
    var elementId = collectionHolder.children("li").length; 
    console.log(elementId);
    var newForm = prototype
                    .replace(/<label class="required">__name__label__<\/label>/g, '')   // TODO finalization. Ugly workaround. Use theming.
                    .replace(/label__/g, '')
                    .replace(/__name__/g, elementId); 
                    console.log(newForm);
    var newFormLi = $('<li></li>').append(newForm);
    
    if(sortable){
        createSortableControls(newFormLi);
        var rank = elementId + 1; // the rank is 1-based
        $(newFormLi).find('input[name*=sortableRank]').attr('value', rank);
    }
    
    $(this).before(newFormLi);
    
    return false;
}

function createSortableControls(element){
    var up   = $('<a href="#" class="sortable-up">Nach oben</a>');
    var down = $('<a href="#" class="sortable-down">Nach unten</a>');
    up.on('click', sortableUp);    
    down.on('click', sortableDown);    
    $(element).append(up);
    $(element).append(down);
}

/**
 * Swaps the values of the sortableRank hidden input fields of the li element,
 * that is the logical title fragment
 */
function swapRanks(titleFragmentLi, otherTitleFragmentLi){
    var rankField = $(titleFragmentLi).find('input[name*=sortableRank]');
    var otherRankField = $(otherTitleFragmentLi).find('input[name*=sortableRank]');
    
    var myRank = rankField.attr('value');
    rankField.attr('value', otherRankField.attr('value'));
    otherRankField.attr('value', myRank);
        
    console.log(jQuery('input[name*=sortableRank]')); //TODO finalization. remove.
};
function sortableUp(){
    var liElement = $(this).parent();
    var prevElement = liElement.prev("li");
    
    if(prevElement.length == 0) return false; // this element is already the first
    else{
        swapRanks(liElement, prevElement);
        // change DOM elements order
        var textareaContent = liElement.find('textarea').attr('value');
        var newElement = liElement.clone(true); // clone event handlers as well
        newElement.find('textarea').attr('value', textareaContent);
        prevElement.before(newElement);
        newElement.effect('highlight');
        liElement.remove();
    }
    return false;
}
function sortableDown(){
    var liElement = $(this).parent();
    var nextElement = liElement.next("li");
    
    if(nextElement.length == 0) return false; // this element is already the last
    else{
        swapRanks(liElement,nextElement);
        // change order in the dom tree
        var textareaContent = liElement.find('textarea').attr('value');
        var newElement = liElement.clone(true); // clone event handlers as well
        newElement.find('textarea').attr('value', textareaContent);
        nextElement.after(newElement);
        newElement.effect('highlight');
        liElement.remove();
    }
    return false;
}

