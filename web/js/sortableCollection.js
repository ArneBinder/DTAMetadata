/* 
 * Contains the UI logic for the sortableCollection form type (src/DTA/MetadataBundle/Form/DerivedType/SortableCollectionType.php).
 * The form type is an input to specify a dynamic number of relations between a database entity and another.
 * This script handles the DOM manipulation to dynamically generate the necessary form inputs.
 * 
 * Additionally, some relations are sortable. Buttons to control the order of
 * form elements are generated by this javascript as well.
 * 
 * Collections are by (my) convention maintained within unordered lists that have the css-class collection-editor.
 */

jQuery(document).ready(createGui);

function createGui(){
    jQuery(document).on('click', '.sortableCollectionWidget.add-entity', addFormElement);
    
    // add up and down control elements for sortable collections
    var sortableElements = jQuery('.collection-sortable li');
    jQuery.each(sortableElements, function(idx,element){
        createSortableControls(element);
    });
}

/**
 * Extends the sortable collection by one collection element.
 */
function addFormElement(){
    
    var $addLink = $(this);
    
    var $collectionHolder = $addLink.parent();
    var $collection = $collectionHolder.children('ol.collection-sortable');
    console.log($collectionHolder, $collection);
    
    // PREPARE PROTOTYPE 
    
    if($collection.attr("data-prototype") === undefined){
        console.log('No protoype element for the collection editor available!');
        return false;
    }            
    
    // using the children method (instead of find) is important here, because sortable collections might be nested,
    // in which case the collection element would be to descending sortable collections as well.
    var elementId = $collection.children("li").length; 
    var modelClassName = $collectionHolder
        .children('input[name=modelClassName]')
        .val();
    var translatedModelClassName = $collectionHolder
        .children('input[name=translatedModelClassName]')
        .val();
    
    var prototype = $collection.attr("data-prototype")
        .replace(/<label class="required">__name__label__<\/label>/g, '');  // remove per fragment label
       
    prototype = prototype.replace(new RegExp('__'+ modelClassName +'ID__', 'g'), elementId);
    
    // CREATE NEW DOM ELEMENT 
    
    var $newForm = $(prototype);
    // TODO: somehow, two additional divs are created by the symfony prototype (check whether sortableCollectionType needs to override a method)
    // remove these
    $newForm = $newForm.children('div').children('div');
    
    var $newFormLi = $('<li></li>')
        .text(translatedModelClassName)
        .append($newForm);
    
    var sortable = $collection.hasClass('collection-sortable');
    if(sortable){
        // add up and down buttons
        createSortableControls($newFormLi, translatedModelClassName);

        // initialize the rank hidden input field
        var rank = elementId + 1; // the rank is 1-based
        var $rankInput = $newFormLi.find('input[name*=sortableRank]');
        $rankInput.attr('value', rank);
    }
    
    $collection.append($newFormLi);
    
    return false;
}

function createSortableControls(element, translatedModelClassName){
                     
    var $collectionHolder = $(element).parent().parent(); // element: li, parent: ol, parent: collection holder
    
    if(undefined === translatedModelClassName)
        translatedModelClassName = $collectionHolder
            .children('input[name=translatedModelClassName]')
            .val();
        
    var iconUpStr = '<i class="icon-arrow-up"></i>';
    var iconDownStr = '<i class="icon-arrow-down"></i>';
    var up   = $('<a href="#" class="sortable-up">'+ iconUpStr + translatedModelClassName +' nach oben</a> ');
    var down = $('<a href="#" class="sortable-down">'+ iconDownStr + translatedModelClassName +' nach unten</a>');
    up.on('click', sortableUp);    
    down.on('click', sortableDown);    
    $(element).append(up);
    $(element).append(down);
}

/**
 * Swaps the values of the sortableRank hidden input fields of the li element,
 * that is the logical title fragment
 */
function swapRanks(titleFragmentLi, otherTitleFragmentLi){
    var rankField = $(titleFragmentLi).find('input[name*=sortableRank]');
    var otherRankField = $(otherTitleFragmentLi).find('input[name*=sortableRank]');
    
    var myRank = rankField.attr('value');
    rankField.attr('value', otherRankField.attr('value'));
    otherRankField.attr('value', myRank);
        
    console.log(jQuery('input[name*=sortableRank]')); //TODO finalization. remove.
}
function sortableUp(){
    var liElement = $(this).parent();
    var prevElement = liElement.prev("li");
    
    if(prevElement.length == 0) return false; // this element is already the first
    else{
        swapRanks(liElement, prevElement);
        // change DOM elements order
        var textareaContent = liElement.find('textarea').attr('value');
        var newElement = liElement.clone(true); // clone event handlers as well
        newElement.find('textarea').attr('value', textareaContent);
        prevElement.before(newElement);
        newElement.effect('highlight');
        liElement.remove();
    }
    return false;
}
function sortableDown(){
    var liElement = $(this).parent();
    var nextElement = liElement.next("li");
    
    if(nextElement.length == 0) return false; // this element is already the last
    else{
        swapRanks(liElement,nextElement);
        // change order in the dom tree
        var textareaContent = liElement.find('textarea').attr('value');
        var newElement = liElement.clone(true); // clone event handlers as well
        newElement.find('textarea').attr('value', textareaContent);
        nextElement.after(newElement);
        newElement.effect('highlight');
        liElement.remove();
    }
    return false;
}

